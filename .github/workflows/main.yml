name: Build and Test

on:
  push:
    branches:
      - master # tagged latest
      - 'release/**' # release branches
      - 'hotfix/**' # hotfix branches
      - 'dev-publish/**' # development branches that publish packages
    tags:
      - v* # semver release
  pull_request: # runs tests only for PRs to master
    branches:
      - master
  workflow_dispatch: {}

env:
  NAME: secp256k1-precompute
  CONAN_REMOTE: kth
  CONAN_REMOTE_URL: https://packages.kth.cash/api/

jobs:
  debug:
    runs-on: ubuntu-latest
    outputs:
      permitted: ${{ steps.check.outputs.permitted }}
    steps:
      - name: Debug Check Job
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Condition result: ${{ github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master' }}"

  check:
    if: github.event_name == 'push' || 
      (github.event_name == 'pull_request' && 
       !startsWith(github.head_ref, 'release/') && 
       !startsWith(github.head_ref, 'hotfix/') &&
       !startsWith(github.head_ref, 'docs/') &&
       !startsWith(github.head_ref, 'style/') &&
       !startsWith(github.head_ref, 'chore/') &&
       !startsWith(github.head_ref, 'noci/'))
    runs-on: ubuntu-latest
    outputs:
      permitted: ${{ steps.check.outputs.permitted }}
    steps:
      - name: Debug Check Job
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Condition result: ${{ github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/dev-publish') }}"
      - id: check
        continue-on-error: true
        uses: prince-chrismc/check-actor-permissions-action@v2
        with:
          permission: write

  setup:
    if: github.event_name == 'push' || 
      (github.event_name == 'pull_request' && 
       !startsWith(github.head_ref, 'release/') && 
       !startsWith(github.head_ref, 'hotfix/') &&
       !startsWith(github.head_ref, 'docs/') &&
       !startsWith(github.head_ref, 'style/') &&
       !startsWith(github.head_ref, 'chore/') &&
       !startsWith(github.head_ref, 'noci/'))
    runs-on: ubuntu-latest
    outputs:
      build-version: ${{ steps.version.outputs.build-version }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      - id: version
        uses: ./.github/actions/determine-version
        with:
          github-ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}
          run-number: ${{ github.run_number }}


  generate-matrix:
    if: github.event_name == 'push' || 
      (github.event_name == 'pull_request' && 
       !startsWith(github.head_ref, 'release/') && 
       !startsWith(github.head_ref, 'hotfix/') &&
       !startsWith(github.head_ref, 'docs/') &&
       !startsWith(github.head_ref, 'style/') &&
       !startsWith(github.head_ref, 'chore/') &&
       !startsWith(github.head_ref, 'noci/'))
    name: Generate Job Matrix
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Debug Info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "Base ref: ${{ github.base_ref }}"
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Generate Job Matrix
        id: set-matrix
        run: |
          MATRIX=$(cat .github/matrix.json)
          echo "${MATRIX}"
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT

  build-with-container:
    needs: [setup, generate-matrix]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    name: ${{ matrix.config.name }}
    uses: ./.github/workflows/build-with-container.yml
    with:
      if: ${{ matrix.config.compiler == 'GCC' }}
      upload: ${{ (github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/release') || startsWith(github.ref, 'refs/heads/hotfix') || startsWith(github.ref, 'refs/heads/dev-publish'))) || (github.event_name == 'pull_request' && (startsWith(github.head_ref, 'release/') || startsWith(github.head_ref, 'hotfix/') || startsWith(github.head_ref, 'dev-publish/'))) }}
      os: ${{ matrix.config.os }}
      image: "kthnode/gcc${{ matrix.config.version }}${{ matrix.config.docker_suffix }}"
      conan-remote: "kth"
      recipe-name: "secp256k1-precompute"
      compiler: ${{ matrix.config.compiler }}
      compiler-version: ${{ matrix.config.version }}
      build-version: "${{ needs.setup.outputs.build-version }}"

    secrets:
      CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_USERNAME }}
      CONAN_PASSWORD: ${{ secrets.CONAN_3_PASSWORD }}

  build-without-container:
    needs: [setup, generate-matrix]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    name: ${{ matrix.config.name }}
    uses: ./.github/workflows/build-without-container.yml
    with:
      if: ${{ matrix.config.compiler != 'GCC' }}
      upload: ${{ (github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/release') || startsWith(github.ref, 'refs/heads/hotfix') || startsWith(github.ref, 'refs/heads/dev-publish'))) || (github.event_name == 'pull_request' && (startsWith(github.head_ref, 'release/') || startsWith(github.head_ref, 'hotfix/') || startsWith(github.head_ref, 'dev-publish/'))) }}
      os: ${{ matrix.config.os }}
      conan-remote: "kth"
      recipe-name: "secp256k1-precompute"
      compiler: ${{ matrix.config.compiler }}
      compiler-version: ${{ matrix.config.version }}
      build-version: "${{ needs.setup.outputs.build-version }}"
    secrets:
      CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_USERNAME }}
      CONAN_PASSWORD: ${{ secrets.CONAN_3_PASSWORD }}

  test:
    needs: [setup, build-with-container, build-without-container]
    if: always() && (needs.build-with-container.result == 'success' || needs.build-without-container.result == 'success')
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - uses: ./.github/actions/setup-conan
      - uses: lukka/get-cmake@latest
                
      - name: Build and test
        run: |
          # Build the project
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build .
          
          # Run the generator
          ./gen_context
          
          # Verify the output file was created
          if [ ! -f "../src/ecmult_static_context.h" ]; then
            echo "Error: ecmult_static_context.h was not generated"
            exit 1
          fi
          
          # Check file size (should be substantial)
          file_size=$(wc -c < "../src/ecmult_static_context.h")
          if [ "$file_size" -lt 1000 ]; then
            echo "Error: Generated file is too small ($file_size bytes)"
            exit 1
          fi
          
          echo "âœ“ Tests passed - generated file size: $file_size bytes"
          
      - name: Run Python test
        run: |
          cd ..
          python test_gen_context.py

  