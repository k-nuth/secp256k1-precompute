name: 'Determine Version'
description: 'Calculates the version tag based off the git reference. SemVer tags are presevered, default branch is latest, other branch are untouched, PRs output alternate ID'
inputs:
  github-ref:
    description: 'The current reference point for the version'
    required: true
  # unique-alt-id:
  #   description: 'The version to return when it is pull request'
  #   required: true
  run-number:
    description: 'Github Run Number'
    required: true


outputs:
  build-version:
    description: "Build Version"
    value: ${{ steps.cal.outputs.version }}
runs:
  using: "composite"
  steps:
  - id: cal
    run: |
      LAST_TAG=$(git tag -l --sort=-creatordate | head -n 1)
      echo "LAST_TAG: $LAST_TAG"
      LAST_TAG=$(echo $LAST_TAG | sed -e 's/^v//')
      echo "LAST_TAG: $LAST_TAG"
      [[ "$LAST_TAG" == "" ]] && LAST_TAG="0.0.0"

      # For PR, github-ref might be just the branch name (e.g., "release/0.68.0")
      # For push, it's the full ref (e.g., "refs/heads/release/0.68.0")
      GITHUB_REF="${{ inputs.github-ref }}"
      echo "Input github-ref: $GITHUB_REF"
      
      # If it doesn't start with refs/, assume it's a branch name and add the prefix
      if [[ ! "$GITHUB_REF" == "refs/"* ]]; then
        GITHUB_REF="refs/heads/$GITHUB_REF"
        echo "Normalized github-ref: $GITHUB_REF"
      fi

      VERSION=$(echo "$GITHUB_REF" | sed -e 's,.*/\(.*\),\1,')
      [[ "$GITHUB_REF" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

      echo "Raw VERSION from ref: $VERSION"
      echo "Github ref: $GITHUB_REF"

      # Handle release branches (release/v1.2.3 -> 1.2.3)
      if [[ "$GITHUB_REF" == "refs/heads/release/"* ]]; then
        VERSION=$(echo $VERSION | sed -e 's/^release\///' -e 's/^v//')
        echo "Release branch detected, using version: $VERSION"
        
        # Check if conanfile.py has a hardcoded version (it shouldn't for dynamic versioning)
        CONAN_VERSION_LINE=$(grep -E '^\s*version\s*=' conanfile.py || echo "")
        if [ ! -z "$CONAN_VERSION_LINE" ]; then
          CONAN_VERSION=$(echo "$CONAN_VERSION_LINE" | sed -E 's/.*version\s*=\s*"([^"]+)".*/\1/')
          echo "⚠️  WARNING: Found hardcoded version in conanfile.py: $CONAN_VERSION"
          echo "  Release branch version: $VERSION"
          echo "  For dynamic versioning, consider removing the hardcoded version."
          echo "  The --version parameter will override the hardcoded version."
        else
          echo "✅ Conanfile.py uses dynamic versioning (no hardcoded version found)"
        fi
        
      # Handle hotfix branches (hotfix/v1.2.4 -> 1.2.4)
      elif [[ "$GITHUB_REF" == "refs/heads/hotfix/"* ]]; then
        VERSION=$(echo $VERSION | sed -e 's/^hotfix\///' -e 's/^v//')
        echo "Hotfix branch detected, using version: $VERSION"
        
        # Check if conanfile.py has a hardcoded version (it shouldn't for dynamic versioning)
        CONAN_VERSION_LINE=$(grep -E '^\s*version\s*=' conanfile.py || echo "")
        if [ ! -z "$CONAN_VERSION_LINE" ]; then
          CONAN_VERSION=$(echo "$CONAN_VERSION_LINE" | sed -E 's/.*version\s*=\s*"([^"]+)".*/\1/')
          echo "⚠️  WARNING: Found hardcoded version in conanfile.py: $CONAN_VERSION"
          echo "  Hotfix branch version: $VERSION"
          echo "  For dynamic versioning, consider removing the hardcoded version."
          echo "  The --version parameter will override the hardcoded version."
        else
          echo "✅ Conanfile.py uses dynamic versioning (no hardcoded version found)"
        fi
        
      # Handle development branches that should upload packages (dev-publish/feature-name -> feature-name-dev.run_number)
      elif [[ "$GITHUB_REF" == "refs/heads/dev-publish/"* ]]; then
        FEATURE_NAME=$(echo $VERSION | sed -e 's/^dev-publish\///')
        VERSION=$(echo "$LAST_TAG-dev-$FEATURE_NAME.${{ inputs.run-number }}")
        echo "🚀 Development publish branch detected, using version: $VERSION"
        echo "   This will create uploadable development packages"
        
      # Handle main/master/dev branches
      elif [ "$VERSION" == "main" ] || [ "$VERSION" == "master" ] || [ "$VERSION" == "dev" ]; then
        VERSION=$(echo "$LAST_TAG-commit.${{ inputs.run-number }}")
        echo "Development branch detected, using version: $VERSION"
      # Handle merge/PR
      elif [ "$VERSION" == "merge" ]; then
        VERSION=$(echo "$LAST_TAG-commit.${{ inputs.run-number }}")
        echo "Merge/PR detected, using version: $VERSION"
      fi

      echo "Final VERSION: $VERSION"
      echo "version=$VERSION" >> $GITHUB_OUTPUT
    shell: bash
